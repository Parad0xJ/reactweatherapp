{"version":3,"sources":["CardWeather.js","FormCity.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["CardWeather","props","state","className","handleClick","bind","this","setState","setTimeout","style","maxWidth","header","city","src","icon","alt","temp","wind","pa","humidity","type","onClick","classperso","Component","AlertMessage","role","FormCity","API_KEY","useState","show","setShow","setCity","cityCode","setCodeCity","data","setData","url","setUrl","useEffect","a","axios","result","fetchData","onSubmit","e","preventDefault","placeholder","value","onChange","target","required","href","console","log","name","img","weather","main","tempmax","temp_max","tempmin","temp_min","pressure","speed","CardCityUser","Footer","App","currentLatLon","lat","lon","getGeolocation","theDate","Date","year","getFullYear","month","getMonth","day","getDay","nday","getDate","navigator","geolocation","error","getCurrentPosition","position","coords","latitude","longitude","get","then","res","imgId","urlImg","newData","catch","message","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.255aabd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class CardWeather extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      className: 'alert alert-warning w-100 mx-auto d-none'\r\n    }\r\n\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ className: 'alert alert-warning w-100 mx-auto d-block' })\r\n\r\n    setTimeout(() => {\r\n      this.setState({ className: 'alert alert-warning w-100 mx-auto d-none' })\r\n    }, 6500)\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"card text-center mx-auto border border-danger cardweather\" style={{ maxWidth: '680px' }}>\r\n        <div className=\"card-header\">\r\n          {this.props.header}\r\n        </div>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">{this.props.city}</h5>\r\n          <p className=\"card-text\"><img src={this.props.icon} alt='icon_weather' />\r\n            <strong>{this.props.temp}°C</strong>\r\n          </p>\r\n          <p className='card-text'>Vitesse du vent : <strong>{this.props.wind} M/s</strong> - Pression Athmosphérique <strong>{this.props.pa}  hPa</strong> - <span>L'humidité est de <strong>{this.props.humidity}%</strong> </span></p>\r\n          <button type='button' className=\"btn btn-outline-info mt-3\" onClick={this.handleClick}>Message</button>\r\n        </div>\r\n        <div className=\"card-footer text-muted\">\r\n          Géolocalisation\r\n  </div>\r\n        <AlertMessage classperso={this.state.className} />\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport const AlertMessage = props => (\r\n  <div className={props.classperso} role='alert'>\r\n    <h6 className=\"alert-heading\">Vous pouvez, aussi, obtenir la météo d'une ville choisie en remplissant le formulaire ci dessous</h6>\r\n\r\n  </div>\r\n)","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function FormCity() {\r\n  const API_KEY = '844a8322bdff6a54c0cb539ba9f0da07'\r\n\r\n  const [show, setShow] = useState(false)\r\n  const [city, setCity] = useState('')\r\n  const [cityCode, setCodeCity] = useState('')\r\n  const [data, setData] = useState([])\r\n  const [url, setUrl] = useState(`https://api.openweathermap.org/data/2.5/weather?q=Paris,FR&units=metric&APPID=${API_KEY}&lang=French-fr`)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(url)\r\n      setData(result.data)\r\n\r\n    };\r\n    fetchData();\r\n  }, [url])\r\n\r\n\r\n\r\n  return (\r\n    < div className='mt-4' >\r\n      <form className=\"form-row w-50 mx-auto\" onSubmit={e => {\r\n        setUrl(`https://api.openweathermap.org/data/2.5/weather?q=${city},${cityCode}&units=metric&APPID=${API_KEY}&lang=French-fr`)\r\n        setCity('')\r\n        setCodeCity('')\r\n        { show ? setShow(false) : setShow(true) }\r\n        e.preventDefault()\r\n      }\r\n\r\n      }>\r\n        <div className='col'>\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Ville\" value={city} onChange={e => setCity(e.target.value)} required />\r\n        </div>\r\n        <div className='col'>\r\n          <input type=\"text\" className=\"form-control\" placeholder=\"Code Ville *\" value={cityCode} onChange={e => setCodeCity(e.target.value)} required />\r\n        </div>\r\n        <div className='col'>\r\n          <button className=\"btn btn-outline-primary\">Météo</button>\r\n        </div>\r\n      </form>\r\n      <p className='lead'>* Le code Ville pour la France est FR - les codes se trouvent sur ce <a href='https://en.wikipedia.org/wiki/ISO_3166-1'>tableau</a>, Chapitre --> Current codes, puis la colonne --> Alpha-2 code <br />\r\n        Les noms de Villes en dehors des villes Françaises s'ecrivent en Anglais exemple pour Londres il faut rechercher ville--> London - Code ville --> GB</p>\r\n      <div className=\"container\">\r\n        {console.log(data)}\r\n        {show ? <CardCityUser city={data.name} img={data.weather[0].icon} temp={data.main.temp} tempmax={data.main.temp_max} tempmin={data.main.temp_min} pa={data.main.pressure} wind={data.wind.speed} humidity={data.main.humidity} /> : null}\r\n      </div>\r\n    </div >\r\n  )\r\n}\r\n// \r\nconst CardCityUser = props => (\r\n  <ul className=\"list-group cardweather w-75 border border-warning mx-auto\">\r\n    <li className=\"list-group-item list-group-item-success\">Vous avez choisie la ville de : <strong>{props.city}</strong></li>\r\n    <li className=\"list-group-item\"><img src={`http://openweathermap.org/img/w/${props.img}.png `} alt='icon_weather' /> La température est de : <strong>{props.temp}°C</strong></li>\r\n    <li className=\"list-group-item list-group-item-success\">Pour la journée le maximum prévu sera de : <strong>{props.tempmax}°C</strong> et le minimum de : <strong>{props.tempmin}°C</strong></li>\r\n    <li className=\"list-group-item\">Le vent souffle à <strong>{props.wind} M/s</strong> - La pression Athmosphèrique est de : <strong>{props.pa} hPa</strong></li>\r\n    <li className=\"list-group-item list-group-item-success\">L'humidité est de : <strong>{props.humidity}%</strong></li>\r\n  </ul>\r\n)","import React from 'react'\r\n\r\nexport const Footer = () => (\r\n  <div className=\"jumbotron jumbotron-fluid mt-5 py-1 text-center  footer\">\r\n  <div className=\"container\">\r\n    <h1 className=\"display-5\">App Weather </h1>\r\n    <p className=\"lead\">React.JS - Axios - Bootstrap IV - API openweathemap.org</p>\r\n    <p className=\"lead\">Créée en Septembre 2019 © Laurent CAMINADE | Tous droits réservés</p>\r\n  </div>\r\n</div>\r\n)","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport axios from 'axios';\nimport CardWeather from './CardWeather'\nimport FormCity from './FormCity'\nimport { Footer } from './Footer'\nimport './App.css';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      data: [],\n      currentLatLon: {\n        lat: 0,\n        lon: 0\n      }\n    }\n\n  }\n\n  componentDidMount() {\n    this.getGeolocation()\n  }\n\n  getDate() {\n    let theDate = new Date()\n    let months = [\"Jan\", \"Fev\", \"Mars\", \"Avr\", \"Mai\", \"Juin\", \"Juil\", \"Août\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"];\n    let days = [\"Dimanche\", \"Lundi\", \"Mardi\", \"Mercredi\", \"Jeudi\", \"Vendredi\", \"Samedi\"];\n    let year = theDate.getFullYear()\n    let month = months[theDate.getMonth()]\n    let day = days[theDate.getDay()]\n    let nday = theDate.getDate()\n\n    let today = `${day} ${nday} ${month} ${year}.`\n    return today\n  }\n\n  getGeolocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n\n        this.setState({\n          currentLatLon: {\n            lat: position.coords.latitude,\n            lon: position.coords.longitude\n          }\n        })\n\n        const API_KEY = '844a8322bdff6a54c0cb539ba9f0da07'\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${this.state.currentLatLon.lat}&lon=${this.state.currentLatLon.lon}&units=metric&APPID=${API_KEY}&lang=French-fr`)\n          .then(res => {\n            const imgId = res.data.weather[0].icon\n            const urlImg = `http://openweathermap.org/img/w/${imgId}.png`\n            return (\n              <div className='mt-5'>\n                <CardWeather header={this.getDate()} city={res.data.name} icon={urlImg} temp={res.data.main.temp} wind={res.data.wind.speed} pa={res.data.main.pressure} humidity={res.data.main.humidity} />\n\n              </div>\n            )\n          })\n          .then(newData => this.setState({ data: newData }))\n          .catch(error => `He is a problem ${error.message}`)\n      })\n    } else {\n      return error => console.log(error)\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <div className=\"App container\">\n          <h1 className='text-warning my-3'><em>WEATHER React App</em></h1>\n          {this.state.data}\n          <hr className='my-5' />\n          <FormCity />\n\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}